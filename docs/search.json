[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "orbit-generation-testing",
    "section": "",
    "text": "The orbit dataset is organized within a three-dimensional numpy array with the following structure:\n\ndata.shape = (num_orbits, 6, num_time_points)\n\n\n\n\nnum_orbits: Total number of distinct orbits in the dataset.\n6: Represents the six scalar values for each orbit at each time point, typically including:\n\nposX, posY, posZ: Position components in the X, Y, and Z dimensions, respectively.\nvelX, velY, velZ: Velocity components in the X, Y, and Z dimensions, respectively.\n\nnum_time_points: Number of time instants at which the data for each orbit is recorded.\n\n\n\n\nFor an individual orbit \\(i\\), the data is represented as a matrix \\(O_i\\) of dimensions \\(6 \\times T\\), where \\(T\\) represents the total number of time points (\\(num\\_time\\_points\\)):\nThe orbit matrix \\(O_i\\) for each orbit \\(i\\) can be represented as:\n\\[\nO_i = \\left(\\begin{array}{cccc}\nposX_{1} & posX_{2} & \\ldots & posX_{T} \\\\\nposY_{1} & posY_{2} & \\ldots & posY_{T} \\\\\nposZ_{1} & posZ_{2} & \\ldots & posZ_{T} \\\\\nvelX_{1} & velX_{2} & \\ldots & velX_{T} \\\\\nvelY_{1} & velY_{2} & \\ldots & velY_{T} \\\\\nvelZ_{1} & velZ_{2} & \\ldots & velZ_{T} \\\\\n\\end{array}\\right)\n\\]\nAnd the state vector \\(vec{v}_{i,t}\\) for orbit \\(i\\) at time point \\(t\\) is:\n\\[\n\\vec{v}_{i,t} = \\left(\\begin{array}{c}\nposX_t \\\\\nposY_t \\\\\nposZ_t \\\\\nvelX_t \\\\\nvelY_t \\\\\nvelZ_t \\\\\n\\end{array}\\right)\n\\]\nThus, the dataset can be envisioned as an assembly of matrices, each encapsulating the trajectory and dynamical state of an orbit over time.\n\n\n\n\nTo retrieve the complete data for a specific orbit \\(i\\), use data[i, :, :].\nFor all data points of a specific scalar measurement \\(j\\) across all orbits and time points, use data[:, j, :].\nTo access data for a specific scalar measurement \\(j\\) at a given time point \\(t\\) across all orbits, the syntax is data[:, j, t].\n\nThis structured approach facilitates efficient data storage and retrieval, allowing for comprehensive and detailed analyses of the orbits.",
    "crumbs": [
      "orbit-generation-testing"
    ]
  },
  {
    "objectID": "index.html#orbit-dataset-structure",
    "href": "index.html#orbit-dataset-structure",
    "title": "orbit-generation-testing",
    "section": "",
    "text": "The orbit dataset is organized within a three-dimensional numpy array with the following structure:\n\ndata.shape = (num_orbits, 6, num_time_points)\n\n\n\n\nnum_orbits: Total number of distinct orbits in the dataset.\n6: Represents the six scalar values for each orbit at each time point, typically including:\n\nposX, posY, posZ: Position components in the X, Y, and Z dimensions, respectively.\nvelX, velY, velZ: Velocity components in the X, Y, and Z dimensions, respectively.\n\nnum_time_points: Number of time instants at which the data for each orbit is recorded.\n\n\n\n\nFor an individual orbit \\(i\\), the data is represented as a matrix \\(O_i\\) of dimensions \\(6 \\times T\\), where \\(T\\) represents the total number of time points (\\(num\\_time\\_points\\)):\nThe orbit matrix \\(O_i\\) for each orbit \\(i\\) can be represented as:\n\\[\nO_i = \\left(\\begin{array}{cccc}\nposX_{1} & posX_{2} & \\ldots & posX_{T} \\\\\nposY_{1} & posY_{2} & \\ldots & posY_{T} \\\\\nposZ_{1} & posZ_{2} & \\ldots & posZ_{T} \\\\\nvelX_{1} & velX_{2} & \\ldots & velX_{T} \\\\\nvelY_{1} & velY_{2} & \\ldots & velY_{T} \\\\\nvelZ_{1} & velZ_{2} & \\ldots & velZ_{T} \\\\\n\\end{array}\\right)\n\\]\nAnd the state vector \\(vec{v}_{i,t}\\) for orbit \\(i\\) at time point \\(t\\) is:\n\\[\n\\vec{v}_{i,t} = \\left(\\begin{array}{c}\nposX_t \\\\\nposY_t \\\\\nposZ_t \\\\\nvelX_t \\\\\nvelY_t \\\\\nvelZ_t \\\\\n\\end{array}\\right)\n\\]\nThus, the dataset can be envisioned as an assembly of matrices, each encapsulating the trajectory and dynamical state of an orbit over time.\n\n\n\n\nTo retrieve the complete data for a specific orbit \\(i\\), use data[i, :, :].\nFor all data points of a specific scalar measurement \\(j\\) across all orbits and time points, use data[:, j, :].\nTo access data for a specific scalar measurement \\(j\\) at a given time point \\(t\\) across all orbits, the syntax is data[:, j, t].\n\nThis structured approach facilitates efficient data storage and retrieval, allowing for comprehensive and detailed analyses of the orbits.",
    "crumbs": [
      "orbit-generation-testing"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "orbit-generation-testing",
    "section": "Install",
    "text": "Install\npip install orbit_generation_testing",
    "crumbs": [
      "orbit-generation-testing"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "orbit-generation-testing",
    "section": "How to use",
    "text": "How to use\n\nGet Example Data\n\norbit_data= get_example_orbit_data()\norbit_data.shape\n\n(200, 6, 300)\n\n\n\nNumber of orbits: 200\nTime instants: 300\n\n\n\nCompute Statistics\n\nplot_histograms(orbit_data)\n\n\n\n\n\n\n\n\n\n\nPlot Orbits\n\nvisualize_static_orbits(orbit_data, orbit_indices= [1,15,30,50,80,100], time_instants=[0], show_legend=True)\n\n\n\n\n\n\n\n\n\nvisualize_static_orbits(orbit_data)\n\n\n\n\n\n\n\n\n\nexport_dynamic_orbits_html(orbit_data)\n\nVisualization saved to orbits.html",
    "crumbs": [
      "orbit-generation-testing"
    ]
  },
  {
    "objectID": "visualization.html",
    "href": "visualization.html",
    "title": "visualization",
    "section": "",
    "text": "from orbit_generation_testing.reader import get_example_orbit_data\nmat_data= get_example_orbit_data()\nmat_data.shape\n\n(200, 6, 300)\nmu = 0.0122\nsystem_points={\n    'Moon': (1-mu,0,0),\n    'Earth': (-mu,0,0),\n    'Lagrange 1': (0.8369,0,0),\n    'Lagrange 2': (1.1557,0,0)\n}",
    "crumbs": [
      "visualization"
    ]
  },
  {
    "objectID": "visualization.html#static",
    "href": "visualization.html#static",
    "title": "visualization",
    "section": "Static",
    "text": "Static\n\nsource\n\nvisualize_static_orbits\n\n visualize_static_orbits (data, time_instants=None, orbit_indices=None,\n                          show_legend=False, point_dict=None)\n\nVisualizes orbits and highlights specified time instants for every orbit in orbit_indices with data shape (num_orbits, 6, num_time_points).\n:param data: numpy.ndarray, shape (num_orbits, 6, num_time_points), containing orbit data. :param time_instants: Optional[list[int]], time instants to highlight across selected orbits. If None or empty, no highlights are made. :param orbit_indices: Optional[list], indices of the orbits to visualize and highlight. If None, uses all orbits. :param show_legend: Optional[bool], indicates whether to show the legend. :param point_dict: Optional[dict], dictionary where keys are point names and values are the 3D coordinates of the points.\n\nvisualize_static_orbits(data= mat_data,time_instants=[0], orbit_indices=[0,20,40], point_dict=system_points)\n\n\n\n\n\n\n\n\n\ntime_instants = [-1, 11]  # Out of bounds\nwith raises(ValueError):\n    visualize_static_orbits(mat_data, time_instants)\n\n#| test \"invalid orbit_indices raises ValueError\"\ntime_instants = [0, 9]  # Valid\norbit_indices = [201]  # Out of bounds\nwith raises(ValueError) as exception_info:\n    visualize_static_orbits(mat_data, time_instants, orbit_indices)\nassert \"Orbit index 201 is out of range.\" in str(exception_info.value)",
    "crumbs": [
      "visualization"
    ]
  },
  {
    "objectID": "visualization.html#dynamic",
    "href": "visualization.html#dynamic",
    "title": "visualization",
    "section": "Dynamic",
    "text": "Dynamic\n\nsource\n\nexport_dynamic_orbits_html\n\n export_dynamic_orbits_html (data, time_instants=None, orbit_indices=None,\n                             point_dict=None, filename='orbits.html')\n\nVisualize orbits in 3D and save as an interactive HTML file with a clickable legend, for data organized as (num_orbits, 6, num_time_points). Includes the option to add named points to the visualization and highlights the positions of each orbit at given time_instants.\n:param data: Numpy array of shape (num_orbits, 6, num_time_points) :param time_instants: Optional[List of int], the time instants to highlight across all orbits. If None or empty, no highlights are made. :param orbit_indices: Optional; List of indices of the orbits to visualize :param filename: String, name of the file to save the HTML plot :param point_dict: Optional; Dictionary where keys are point names and values are the 3D coordinates of the points\n\nexport_dynamic_orbits_html(data=mat_data, point_dict= system_points, time_instants=[0], orbit_indices=[1])\n\nVisualization saved to orbits.html\n\n\n\ndata = np.zeros((3, 6, 50))  # Dummy data with 3 orbits, 6 parameters, 50 time points\ntime_instants = [-1, 51]  # Invalid time_instants\norbit_indices = [0, 1]  # Valid orbit indices\nfilename = 'test_orbits.html'  # Filename for saving the HTML\nwith raises(ValueError):\n    export_dynamic_orbits_html(data, time_instants, orbit_indices, filename=filename)\n\n#| test \"invalid orbit_indices raises ValueError\"\ntime_instants = [10, 20]  # Valid time_instants\norbit_indices = [3, 4]  # Invalid orbit indices (out of range for given data)\nwith raises(ValueError):\n    export_dynamic_orbits_html(data, time_instants, orbit_indices, filename=filename)",
    "crumbs": [
      "visualization"
    ]
  },
  {
    "objectID": "data_reader.html",
    "href": "data_reader.html",
    "title": "reader",
    "section": "",
    "text": "from unittest.mock import patch, MagicMock",
    "crumbs": [
      "reader"
    ]
  },
  {
    "objectID": "data_reader.html#loading-data",
    "href": "data_reader.html#loading-data",
    "title": "reader",
    "section": "Loading Data",
    "text": "Loading Data\nThis function loads orbit data from .mat or .h5\n\nsource\n\nload_orbit_data\n\n load_orbit_data (file_path, variable_name=None, dataset_path=None)\n\nLoad orbit data from MATLAB .mat files or HDF5 .h5 files.\nParameters: - file_path: str, the path to the .mat or .h5 file. - variable_name: str, optional, the name of the variable in the .mat file. - dataset_path: str, optional, the path to the dataset in the .h5 file.\nReturns: - data: The loaded orbit data.\n\nmock_mat_data = {'Xarray': np.array([1, 2, 3])}\nmock_h5_data = np.array([4, 5, 6])\n\n# Test for load_orbit_data with .mat file\nwith patch('__main__.loadmat', return_value=mock_mat_data) as mock_loadmat:\n    result = load_orbit_data('test_data.mat', variable_name='Xarray')\n    assert (result == mock_mat_data['Xarray']).all(), \"MAT file loading failed or data mismatch\"\n    mock_loadmat.assert_called_once_with('test_data.mat')\n\n# Test for load_orbit_data with .h5 file\nwith patch('__main__.h5py.File') as mock_h5py:\n    mock_file = MagicMock()\n    mock_file.__enter__.return_value = {'/files/PERIODIC ORBITS': mock_h5_data}\n    mock_h5py.return_value = mock_file\n    result = load_orbit_data('test_data.h5', dataset_path='/files/PERIODIC ORBITS')\n    assert (result == mock_h5_data).all(), \"H5 file loading failed or data mismatch\"\n\n\n\nFunctions to return data directly\n\nsource\n\n\nget_big_orbitb_data\n\n get_big_orbitb_data ()\n\n\nsource\n\n\nget_example_orbit_data\n\n get_example_orbit_data ()\n\nLoad orbit data from a hardcoded MAT file located in the data directory.\nThe function is specifically designed to load the ‘Xarray’ variable from the ‘1_L2_S_200_EM_CR3BP.mat’ file. This setup is intended for demonstration or testing purposes, where the data file and the variable of interest are known ahead of time.\n:return: A numpy.ndarray containing the transposed data from the MAT file.\n\ndata = get_example_orbit_data()\ndata.shape\n\n(200, 6, 300)",
    "crumbs": [
      "reader"
    ]
  },
  {
    "objectID": "statistics.html",
    "href": "statistics.html",
    "title": "statistics",
    "section": "",
    "text": "from orbit_generation_testing.reader import get_example_orbit_data\nmat_data= get_example_orbit_data()\nmat_data.shape\n\n(200, 6, 300)",
    "crumbs": [
      "statistics"
    ]
  },
  {
    "objectID": "statistics.html#simple-statistics",
    "href": "statistics.html#simple-statistics",
    "title": "statistics",
    "section": "Simple statistics",
    "text": "Simple statistics\n\nsource\n\nplot_histograms\n\n plot_histograms (data)\n\nPlots histograms for the 6 scalar values (position and velocity in X, Y, Z) across all orbits and time points.\n:param data: numpy.ndarray, shape (num_orbits, 6, num_time_points), containing orbit data.\n\nplot_histograms(mat_data)\n\n\n\n\n\n\n\n\n\nsource\n\n\ncalculate_overall_statistics\n\n calculate_overall_statistics (orbits)\n\nCalculate the overall min, mean, max, 25%, 50%, and 75% statistics for each scalar (posx, posy, posz, velx, vely, velz) across all time instants and orbits.\nParameters: - orbits: numpy array of shape [number_of_orbits, 6, number_of_time_instants]\nReturns: - stats: A dictionary with stats (‘min’, ‘mean’, ‘max’, ‘25%’, ‘50%’, ‘75%’) for each scalar.\n\norbits = np.array([\n    [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8]],  # Orbit 1\n    [[4, 4, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9]]   # Orbit 2\n])\nstats = calculate_overall_statistics(orbits)\n\nassert stats['posx']['min'] == 1, \"Min of posx is incorrect\"\nassert stats['posx']['mean'] == 3, \"Mean of posx is incorrect\"\nassert stats['posx']['max'] == 4, \"Max of posx is incorrect\"\nassert stats['posx']['25%'] == 2.25, \"25th percentile of posx is incorrect\"\nassert stats['posx']['50%'] == 3.5, \"Median of posx is incorrect\"\nassert stats['posx']['75%'] == 4, \"75th percentile of posx is incorrect\"",
    "crumbs": [
      "statistics"
    ]
  }
]