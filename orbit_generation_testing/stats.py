# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_statistics.ipynb.

# %% auto 0
__all__ = ['plot_histograms', 'calculate_overall_statistics']

# %% ../nbs/04_statistics.ipynb 2
import numpy as np
import matplotlib.pyplot as plt

# %% ../nbs/04_statistics.ipynb 6
def plot_histograms(data):
    """
    Plots histograms for the 6 scalar values (position and velocity in X, Y, Z) across all orbits and time points.
    
    :param data: numpy.ndarray, shape (num_orbits, 6, num_time_points), containing orbit data.
    """
    scalar_names = ['posX', 'posY', 'posZ', 'velX', 'velY', 'velZ']
    num_scalars = len(scalar_names)
    
    fig, axs = plt.subplots(2, 3, figsize=(15, 10))  # Adjust the subplot layout as necessary
    fig.suptitle('Histograms of Position and Velocity Components Across All Orbits')
    
    for i in range(num_scalars):
        scalar_values = data[:, i, :].flatten()  # Flatten combines all orbits and time points for each scalar
        
        row, col = divmod(i, 3)  # Determine subplot position
        axs[row, col].hist(scalar_values, bins=50, alpha=0.75)  # You can adjust the number of bins
        axs[row, col].set_title(f'{scalar_names[i]}')
        axs[row, col].set_ylabel('Frequency')
        axs[row, col].set_xlabel('Value')
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust layout to make room for the main title
    plt.show()



# %% ../nbs/04_statistics.ipynb 8
def calculate_overall_statistics(orbits):
    """
    Calculate the overall min, mean, max, 25%, 50%, and 75% statistics for each scalar 
    (posx, posy, posz, velx, vely, velz) across all time instants and orbits.

    Parameters:
    - orbits: numpy array of shape [number_of_orbits, 6, number_of_time_instants]

    Returns:
    - stats: A dictionary with stats ('min', 'mean', 'max', '25%', '50%', '75%') for each scalar.
    """
    stats = {}
    for scalar_index, scalar_name in enumerate(['posx', 'posy', 'posz', 'velx', 'vely', 'velz']):
        scalar_data = orbits[:, scalar_index, :].flatten()  # Flatten to treat all orbits' data as a single array
        stats[scalar_name] = {
            'min': np.min(scalar_data),
            'mean': np.mean(scalar_data),
            'max': np.max(scalar_data),
            '25%': np.percentile(scalar_data, 25),
            '50%': np.median(scalar_data),  # Median is equivalent to the 50th percentile
            '75%': np.percentile(scalar_data, 75)
        }
    
    return stats
