# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_processing.ipynb.

# %% auto 0
__all__ = ['reshape_orbit_data', 'select_and_remove']

# %% ../nbs/01_processing.ipynb 2
import numpy as np
from nbdev.showdoc import *

# %% ../nbs/01_processing.ipynb 3
def reshape_orbit_data(input_array):
    """
    Reshapes the input array from 'time instants', 'scalars indicating position and velocity',
    and 'number of orbits' to 'number of orbits', 'scalars indicating position and velocity',
    and 'time instants'.
    
    Parameters:
    - input_array: A numpy array with dimensions in the order of 'time instants',
                   'scalars indicating position and velocity', and 'number of orbits'.
                   
    Returns:
    - reshaped_array: A numpy array with dimensions in the order of 'number of orbits',
                      'scalars indicating position and velocity', and 'time instants'.
    """
    reshaped_array = np.transpose(input_array, (2, 1, 0))
    
    return reshaped_array

# %% ../nbs/01_processing.ipynb 5
def select_and_remove(data, select_n):
    """
    Select elements from the first dimension of the data and remove the first index
    from the second dimension.
    
    Parameters:
    - data: A 3D NumPy array.
    - select_n: An integer specifying the number of random elements to select from
                the first dimension, or a list of specific indices to select.
    
    Returns:
    - A new array with the selected elements and without the first index in the
      second dimension.
    """
    
    # Check if select_n is an integer (for random selection)
    if isinstance(select_n, int):
        indices = np.random.choice(data.shape[0], select_n, replace=False)
    elif isinstance(select_n, list):
        indices = np.array(select_n)
    else:
        raise ValueError("select_n must be an integer or a list of integers")
    
    # Selecting the data based on indices
    selected_data = data[indices]
    
    # Removing the time dimension
    reshaped_data = np.delete(selected_data, 0, axis=1)
    
    return reshaped_data
